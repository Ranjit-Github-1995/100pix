// Box Shadow Mixins
@mixin box-shadow($top, $left, $blur, $spread, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow: inset $top $left $blur $spread $color;
        -moz-box-shadow: inset $top $left $blur $spread $color;
        box-shadow: inset $top $left $blur $spread $color;
    }
    @else {
        -webkit-box-shadow: $top $left $blur $spread $color;
        -moz-box-shadow: $top $left $blur $spread $color;
        box-shadow: $top $left $blur $spread $color;
    }
}

//@ Flex width
@mixin _flex-width($per-width) {
    -webkit-box-flex: 0;
    -ms-flex: 0 0 $per-width;
    flex: 0 0 $per-width;
    max-width: $per-width;
}

// Transition Mixins
@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

// generic transform
@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}

// rotate
@mixin rotate ($deg) {
    @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
    @include transform(scale($scale));
}

// translate
@mixin translate ($x, $y) {
    @include transform(translate($x, $y));
}

// skew
@mixin skew ($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
}

//transform origin
@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
    -o-transform-origin: $origin;
    -ms-transform-origin: $origin;
    -webkit-transform-origin: $origin;
    transform-origin: $origin;
}


/* @include transform(rotate(30deg));*/

// Pseudo Sass
@mixin pseudo($display: block, $pos: absolute, $content: '') {
    content: $content;
    display: $display;
    position: $pos;
}


/* @include pseudo; */


/*== Placeholder  ==*/

@mixin input-placeholder {
    &.placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
    &::-webkit-input-placeholder {
        @content;
    }
}


/*== Break Points ==*/

@mixin breakpoint($point) {
    @if $point==small-mobile {
        @media (min-width: 320px) {
            @content ;
        }
    }
    @if $point==mobile {
        @media (min-width: 480px) {
            @content ;
        }
    }
    @if $point==large-mobile {
        @media (max-width: 600px) {
            @content ;
        }
    }
    @else if $point==ipad {
        @media (min-width: 768px) {
            @content ;
        }
    }
    @else if $point==tablet {
        @media (min-width: 992px) {
            @content ;
        }
    }
    @else if $point==large-tablet {
        @media (min-width: 1025px) {
            @content ;
        }
    }
    @else if $point==laptop {
        @media (min-width: 1200px) {
            @content ;
        }
    }
    @else if $point==small-desktop {
        @media (min-width: 1400px) {
            @content ;
        }
    }
    @else if $point==desktop {
        @media (min-width: 1680px) {
            @content ;
        }
    }
}

// Tringle mixin
@mixin triangle($size, $color, $direction) {
    height: 0;
    width: 0;
    border-color: transparent;
    border-style: solid;
    border-width: $size / 2;
    @if $direction==up {
        border-bottom-color: $color;
    }
    @else if $direction==right {
        border-left-color: $color;
    }
    @else if $direction==down {
        border-top-color: $color;
    }
    @else if $direction==left {
        border-right-color: $color;
    }
    @else {
        @error "Unknown direction #{$direction}.";
    }
}

// .next {
//   @include triangle(5px, black, right);
// }